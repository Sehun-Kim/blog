---
title: "[JAVA] 초보를 위한 객체지향 Tip"
layout: post
date: 2018-09-30
image:
headerImage: false
tag:
- Java
- 객체지향설계
- TDD
- MVC
category: blog
author: sehunkim
description: 객체지향설계 방법
star: true # true로할 경우 제목에 highlight 처리가 됨
sitemap :
  changefreq : daily
  priority : 1.0
---

# *주의*
<span class="evidence">비 정기적으로 수정하는 문서</span>

### Description
기초적인 JAVA 문법만 아는 초보들을 위한 ***객체지향설계개념*** 과 ***코딩컨벤션*** 을 정리할 문서.

<!-- index-->
>
### INDEX
1. [Java Coding Convention](#1)
2. [객체지향적으로 자바사용하기](#2)
- [Class vs Object](#2-1)
- [객체지향 4대 특성](#2-2)
- [객체지향 설계 5원칙](#2-3)
- [Tip](#2-4)
3. [Design Pattern](#3)
- [MVC](#3-1)
4. [TDD](#4)

<br>
<br>
<br>
<br>


---

<!-- 내용 -->
## <a id="1"></a>1. Java Coding Convention

> Oracle의 공식 [Java 8 Coding Convention](https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141388.html)을 참조하였다.

Java 코드 작성 시 어떤 규칙을 지켜야 하는지 Oracle의 공식 가이드에 자세히 설명되어있다. 평소에 모든 가이드 내용을 숙지하고 있기 어렵기 때문에 자주 틀리는 공백(White Space) 규칙을 정리하겠다.

#### Blank Lines
공백행은 논리적으로 관련된 코드 섹션을 나누어 가독성을 향상 시킴

##### 빈 줄 두 칸

- Class 와 Interface 정의 사이

{% highlight java %}
package test; // 패키지 영역
// Blank Line
import java.util.Scanner; // import 영역
// Blank Line
public Test{ // class 영역
  ...
}
{% endhighlight %}
- 소스파일의 섹션 사이

{% highlight java %}
// Blank Line
class Test {
}
// Blank Line
inteface Test2 {
}
{% endhighlight %}

##### 빈 줄 한 칸

- 메소드 사이

{% highlight java %}
public void method1() {
  ...
}
// Blank Line
public void method2() {
  ...
}
{% endhighlight %}

- 메소드의 지역 변수와 첫 번째 명령문 사이

{% highlight java %}
public void method1() {
  int sum = 0;
  // Blank Line
  for (int i = 0; i < 10; i++) {
    sum += i;
  }
}
{% endhighlight %}

- 가독성을 향상시키기 위해 메소드 내 논리적인 영역 사이에 공백라인 추가

{% highlight java %}
// Blank Line
/*
* 블록코멘트
*/
// Blank Line
// 한 줄 주석
{% endhighlight %}

- block 주석과 한 줄 주석 전에

{% highlight java %}
public void mehtod(int n) {
  int sum = 0;
  // Blank Line
  for (int i=0; i < n; i++) {
    sum += i;
  }
  // Blank Line
  for (int i=n; i > 0; i--) {
    sum -= i;
  }
}
{% endhighlight %}

#### Blank Spaces

- 키워드 뒤에 괄호가 오면 공백을 추가해야한다.

{% highlight java %}
while (true) {
    ...
}
{% endhighlight %}

**Tip:** 공백은 메서드 이름과 여는 괄호 사이에 사용하면 안됩니다. ex) public void *method()* {}

  - 모든 이진연산자를 피 연산자와 구분하기 위해 공백을 사용해야 한다. 단항 연산자의 경우 피연산자와 공백없이 붙여야한다.

{% highlight java %}
public int add(int a, int b) {
  return a + b;
}
{% endhighlight %}
- 인수 리스트의 쉼표 뒤에는 공백이 와야한다.

{% highlight java %}
int a = 1;
int b = 2;

// 이진연산자
int result = a + b;
// 단항연산자
a++;
{% endhighlight %}

{% highlight java %}
for (expr1; expr2; expr3)
{% endhighlight %}

- 형변환(Cast)할 형태와 값 사이에는 공백이 있어야 한다.

- for문의 표현식은 공백으로 구분되어야 한다.

{% highlight java %}
double a = 1.0;
int result = (int) a;
{% endhighlight %}

---

## <a id="2"></a> 2. 객체지향적으로 자바 사용하기
[스프링 입문을 위한 자바 객체지향의 원리와 이해](http://wikibook.co.kr/java-oop-for-spring/)를 참고하여 작성

> *"중복은 해악이다."*


### <a id="2-1"></a> 2-1 Class vs Object

#### 클래스 vs 객체
1. **객체** 란 유일무이하게 ```식별```이 가능한 것을 말한다.
- 세상에 존재하는 모든 '사물'.
- '실체'하는 유일한 것
- '속성'과 '행위'를 갖는 것

2. **클래스** 란 객체들의 ```분류```이다.
- '분류'
- '개념'

보통 클래스와 객체의 차이를 답하라 하면 많은 사람들이 ```붕어빵```과 ```붕어빵틀```의 예시를 든다. 보통 ```Class```를 생성하여 ```Object```를 만들 수 있다 생각하기 때문에 ```붕어빵틀```로 ```붕어빵```을 만들 수 있다는 것이다.

간단히 코드로 옮겨보면
{% highlight java %}
붕어빵틀 붕어빵 = new 붕어빵틀();
{% endhighlight %}

```붕어빵틀```로 ```붕어빵```을 만들었는데 타입이 ```붕어빵틀```이란 것은 말이 안되는 코드다. ```붕어빵틀```은 ```붕어빵```에 대한 **클래스**가 아니라 ```붕어빵```에 대한 **팩토리클래스**이다. (팩토리 클래스는 다른 객체를 생성하는 클래스다.)

{% highlight java %}
붕어빵 크림붕어빵 = new 붕어빵();
{% endhighlight %}
이렇게 되어야 한다.


#### 객체 식별하기
객체와 클래스를 구별짓는 가장 중요한 질문은 이것이 '분류'인가 '사물'인가이다.

**객체**는 유일한 **identity**를 갖는다.
> 나이, 제조년월을 물었을 때 답할 수 있다면, 객체. 없다면 클래스이다.

```java
피켜스케이터 김연아 = new 피겨스케이터();
// 김연아 -> 객체

자동차 아버지의소나타 = new 자동차();
// 자동차 -> 클래스
// 아버지의소나타 -> 객체

고양이 냐옹이 = new 냐옹이();
// 고양이 -> 클래스
// 냐옹이 -> 객체
```

때문에 객체를 구현할 때 이름이 중요하다. 객체는 분류의 명칭을 가지면 안된다.
```java
Student student = new Student(); // x
Student james = new Student(); // o
```

### <a id="2-2"></a> 2-2 객체지향 4대 특성
- [추상화]({{ site.url }}/abstract)
- [상속]({{ site.url }}/extends)
- [캡슐화]({{ site.url }}/encapsulation)
- [다형성]({{ site.url }}/polymorphism)


### <a id="2-3"></a> 2-3 객체지향 설계 5원칙




### <a id="2-4"></a> 2-4 Tip
- 패키지 명은 항상 소문자로 작성
> util, domain, view

- 변수명에는 자료형을 쓰지말아라.
> List<Car> carList; (x) List<Car> cars; (o)

- 상태값이 변하는 값은 인스턴스 변수로, 상태값이 변하지 않는 값은 static 변수로 만들어라.

- 인스턴스 변수는 필요할 때만 선언하라. 다른 변수를 이용해서 구할 수 있다면 중복

{% highlight java %}
// carsNums는 cars.size()로 구할 수 있기 때문에 중복이다.
public Cars{
  private List<Car> cars; // Car 객체들이 저장될 인스턴스 변수
  private int carsNums; // 저장된 Car 객체들의 갯수

  ...
}
{% endhighlight %}

- 메소드에서 else를 쓰지 마라. else를 쓰지 않을 경우 코드가 간결해지고 메소드의 역할이 명확해진다.

- 생성자가 두 종류 이상일 때, Factory Method로 구현하는 방식을 명시한다.

#### 다형성

- 다형성을 잘 활용하면 서로간에 영향을 미치지 않은 상태에서 기능을 확장할 수 있다.

- "조합" (Composition) : A가 B를 가진다. (has a)

{% highlight java %}
// 변경에 유연하게 대응할 수 있다.
class A {
  private B; // 여기서 B를 비슷한 기능을 가진 다른 객체로 바꾸어 사용이 가능
}
{% endhighlight %}

- "상속" (Inheritance) : A는 B다. (is a). 핵심로직일 경우 외부에서 접근하지 못하게하고 자식만 접근하도록 protected 키워드를 쓸 것.
'부모는 자식을 가리킬 수 있다.'

{% highlight java %}
// 기능을 '확장'하기위해 사용한다.
class A {
  protected String name; // 상속받은 자식까지만 접근할 수 있게

  A(String name) {
    this.name = name;
  }

  public void print() {
    System.out.println(this.name + "는 A꺼다.");
  }

}

class B extend A {

  B(String name) {
    super(name);
  }

  @Override
  public void print() {
    System.out.println(this.name + "는 B꺼다.");
  }

}
{% endhighlight %}


- 여러 클래스의 *일부분만* '중복'일 때 `abstract 클래스`의 `abstract 메소드`로 만들면 중복을 제거할 수 있다.

- Interface : '어떤 것'들의 표준을 잡는 것 (구현되지 않은 메소드들의 집합)
```
인터페이스는 구현을 '강제'
외부와의 접점이기에 public 키워드가 없어도 메소드를 구현할 때 무조건 public으로 구현
인터페이스는 객체가 무엇(변수)을 가지는 지는 관심없다. 어떤 행위(메소드)를 해야하는지만이 중요
만약 추상클래스에 추상 메소드만이 존재할 때는 추상클래스가 아닌 인터페이스로 구현
```

- Abstract(추상) vs Interface(인터페이스) :

중복되는 부분이 있을 때 중복되는 부분을 abstract class의 메소드로 추출한다. 추상클래스의 역할은 인터페이스와 실제 구현할 클래스 사이에 중복되는 메소드를 제거하는 역할을 한다.
```
중복을 제거한 클래스의 계층
inteface A
abstract class B implements A
class C extend abstract B
```

{% highlight java %}
List<Integer> aList = new ArrayList<>();
List<Integer> lLIst = new LinkedList<>();

// 두 List 타입의 객체를 서로 다른 클래스로 구현하였으나 외부에 노출되는 기본 행위(메소드)는 동일하여 사용자는 어떤식으로 구현되어있는지 신경쓰지 않아도 된다.
aList.add(1);
lList.add(1);
{% endhighlight %}
- 인터페이스는 보안에 '유리'하다. : 내부로직이 들어나지 않고 '행위'만 노출하기 때문에. 구현체를 노출하지 않는다.

- 인터페이스 기반으로 객체를 설계할 때 구현체를 노출하는 것이 아니라 인터페이스를 노출시켜라.

---

## <a id="3"></a>4. Design Pattern


### <a id="3-1"></a>3-1 MVC 패턴
재사용성을 높여 비용을 절감하는 것. 특히 모델(핵심 로직)을 재사용하기 위해. 뷰와 컨트롤러만 바꾸어서 Web -> App -> API 등으로 사용할 수 있다. 핵심로직은 잘 바뀌지 않는다. 제일 많이 변경되는 곳은 View다.

- MVC : 확장성 있는 설계를 위해 핵심로직과 UI는 분리할 것
```
Model : 핵심로직(Domain)
Controller : View에서 값을 얻어 Model에 분배하고 다시 Model에서 값을 받아 View로 전달하는 역할
View : 사용자에게 입력, 출력을 하는 부분
```

- DTO : Data Transfer Object. Data 전달을 위해 필요한 객체. => MutableObject 
```
핵심로직을 수행하는 Model과 데이터 영역을 분리 (Model 캡슐화)
View에 Data만 전달하기 위해 필요한 객체.
getter와 setter를 사용하여 상태값을 변경하고 얻어 낼 수 있다.
단, 자신의 값은 직접 변경하게 외부에서는 메시지를 보내는 형태로 값을 변경시켜야한다.
```

- VO : Value Object => ImmutableObject
```
VO == DTO 는 틀린말
DTO는 java bean 규약에 따라 setter, getter를 허용하고 있다. (변경가능)
VO는 value(값)이다. 즉 변경불가능한 값이다.
VO는 개발자가 추상화하여 정의한 상수이다. 넓은 범위가 아닌 개발자가 원하는 범위와 타입을 지정해서 쓴다.
```

- 안전한 프로그래밍(의도하지 않은 변경)을 위해서 DTO를 제외한 핵심로직은 모두 ImmutableObject로 만들 것

- 핵심로직(Model)에선 get과 set을 쓰지말아라.
```
데이터를 꺼낼 상황에 무조건 한번 의심해 보라.
반드시 꺼내야 하는지 아님 메시지를 보내서 처리할 수 있는지.
ImmutableObject의 값을 변경할 일이 생긴다면,
메소드로 값을 변경한 새로운 객체를 생성하여라.
```
---

## <a id="4"></a>3. TDD

- 메소드를 짤 때 항시 테스트 코드를 먼저 작성하고 로직을 짤 것

- production package와 test package는 동일해야한다.
> 접근제어자를 default로 하여 접근이 가능하게 한다.
