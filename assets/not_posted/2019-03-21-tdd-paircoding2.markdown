---
title: "TDD 해보니까 어때? (2)"
layout: post
date: 2019-03-22
image:
headerImage: false
tag:
- 프로젝트 회고
category: blog
author: sehunkim
description: 초보 개발자의 TDD 체험기 2편
star: false # true로할 경우 제목에 highlight 처리가 됨
sitemap :
  changefreq : daily
  priority : 1.0
---

# 주의 : 이 글은 TDD 설명서가 아니다!
이 글은 TDD 설명서도 아니고, 무조건적인 TDD 옹호글도 아니다.

TDD는 개발방식의 하나일 뿐이고, 상황에따라 다른 개발방식이 필요할 것이다. 이제 막 TDD를 배우고 적용해 쪼랩 개발자가 알면 얼마나 알겠는가.
잘못된 내용이 있다면 따끔하게 지적해주고, 어떤 고민을 해왔는지 읽어봐주셨으면 좋겠다.


---

# TDD를 하며 놓치지 말아야 하는 부분
[앞선 글]({{ site.url }}/tdd-paircoding1)에서 나는 인디언포커를 페어 코딩과 TDD 방식을 활용하여 개발하기로 결정했었다.
> 이미 페어코딩에 대한 느낀점과 TDD와 함께 사용했을 때 어떤 시너지를 낼 수 있는지는 설명하였다.

TDD를 사용하는 과정 자체는 심플하다.
- 원하는 문제를 해결할 테스트 케이스를 만든다.
- 테스트 케이스를 통과시킬 수 있는 최소한의 코드를 작성한다.
- 리팩토링하고, 다시 반복한다.

이 과정속에서 가장 중요한 부분은 리팩토링이다. 일단 테스트 케이스에는 임의의 값을 넣었을 때 원하는 결과가 나오는지만 정의하면 되고, 실제 코드는 통과할 수 잇게만 작성하면된다.

하지만 이렇게 완성된 코드는 테스트를 통과하기 위해서만을 작성된 코드이기 때문에 조잡할 가능성이 있다.

예를 들어



이 때, 개발하면서 꼭 지켜야할 두 가지를 정했다.
- **모든 도메인 로직은 TDD 방식으로 구현할 것.**
- **콘솔 기반으로 개발하되, 웹 프로젝트로 확장할 것을 고려하여 개발할 것.**

첫번째 조건은 애초에 이 프로젝트를 시작한 이유였고, 두 번째 조건은 약간 욕심을 부린 부분이다.

### Layered Architecture
사실 콘솔기반으로 두 명의 플레이어가 한 번 인디언 포커를 할 수 있게 게임을 설계할 때는 고려해야 하는 부분이 적다.

일단 입출력은 모두 콘솔 영역에서 이루어 진다. 그리고, 한 번 프로그램을 실행했을 때 한번의 게임만 할 수 있기 때문에 따로 영구적으로 데이터를 저장할 필요가 없다. 때문에 편하게 개발하려면 입출력 로직을 핵심로직 사이사이에 두면서 개발하면 된다.

근데 이렇게 하면










<div class="breaker"></div>
